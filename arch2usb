#!/bin/bash

# DEBUG OPTIONS:
#set -x # trace complete output
set -e # stop if one command fails
set -u # no undefined/empty variables allowed
set -o pipefail # stop if one pipe fails
LOG=true

# ===============================================
# VARIABLES
# ===============================================
WORK="$(dirname $(readlink -f $0))"
LOGFILE="$WORK/build.log"
source ${WORK}/version

MNT="/mnt/usb"
BOOT="$MNT/boot"
ROOTFS="$MNT"
DATAFS="/mnt/datafs"


PACKAGES=$(tr ' \n' ' ' < $WORK/config/arch/packages-minimal.txt)

CHROOT="arch-chroot ${ROOTFS}"
CHROOTCMD="arch-chroot ${MNT}"

HOSTNAME=superman
USER=polar
PASSWORD="evis32"

# ===============================================
# CLI INTERFACE
# ===============================================

# OPTIONS (DEFAULT)
UNMOUNT="NO"
ADDEFI="NO"
FULLWIPE="NO"
FULLBUILD="NO"
BASEBUILD="NO"
UPDATE_TUI="NO"
UPDATE_CONFIG="NO"
ENTER_CHROOT="NO"
IMG2DATAFS="NO"
TARGET=""

function about() {
  echo""
  echo "┌──────────────────────────────────────────────────┐"
  echo "│      Arch Linux on USB Live System Builder       │"
  echo "│ ------------------------------------------------ │"
  echo "│ Author:   S. Reddy                               │"
  echo "│ Version:  ${ARCH_VERSION}                                    │"
  echo "│ ------------------------------------------------ │"
  echo "│ Purpose: Builds an Arch Linux Live System as     │"
  echo "│          Swiss Army Knife toolbox with tui for   │"
  echo "│          flashing, backups, install & repair.    │"
  echo "└──────────────────────────────────────────────────┘"
  echo""
}

function usage() 
{
cat <<EOF
┌──────────────────────────────────────────────────┐
  PURPOSE:"
  Install an Arch Linux Live System on USB drive!
  
  USAGE:
    $(basename $0) [options] [target]               
  
  OPTIONS:"
    -f, --fullbuild    build complete system
    -b, --basebuild    build only base system
    -n, --nopart       build on existing partitions
  
    -p, --partitions   create empty partition scheme    
    -w, --wipe-full    wipe USB drive  </dev/<sdX>
    -x, --chroot       enter chroot    </dev/<sdX>
  
    -t, --tui          copy tui files to </dev/<sdX>
    -c, --configure    update config on  </dev/<sdX>

    -i, --img2data     copy image files to data partition
    -u, --unmount      unmount all mounted on </dev/sdX>
  
    -v, --version      Show $(basename $0) version
    -h, --help         This help dialog"
   
   EXAMPLE:
    $(basename $0) --fullbild </dev/sdX>"
    $(basename $0) -w -f </dev/sdX>"
   └──────────────────────────────────────────────────┘
  
EOF
}

function version()
{
  echo "$(basename $0)"
  echo "Version: ${ARCH_VERSION}"
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -f|--fullbuild)
            FULLBUILD="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -b|--base-system)
            BASEBUILD="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -t|--tui)
            UPDATE_TUI="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -c|--configure)
            UPDATE_CONFIG="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -w|--fullwipe)
            FULLWIPE="YES"
            shift
            ;;
        -e|--efi)
            ADDEFI="YES"
            shift
            ;;     
        -i|--img2datafs)
            IMG2DATAFS="YES"
            FROM="$2"
            TARGET="$3"
            shift
            shift
            shift
            ;;    
        -x|--chroot)
            ENTER_CHROOT="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -u|--unmount)
            UNMOUNT="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -v|--version)
            version
            exit 0
            shift
            ;;
        -h|--help)
            about
            usage
            exit 0
            shift
            ;;
        *)    # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            echo "ERROR: Unknown argument: ${POSITIONAL}"
            usage
            exit 1
            shift
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters



# ===============================================
# CHECKS
# ===============================================
# root check
[ $(whoami) != root ] && echo "You must be root!" && exit 1

# clean log
[ $LOG == true ] && [ -f $LOGFILE ] && rm $LOGFILE


# ===============================================
# FUNCTIONS
# ===============================================
STEPCOUNTER=1
function lognl()
{
	echo
	echo "=========================================="
	echo " STEP $STEPCOUNTER: $1"
	echo "=========================================="
  STEPCOUNTER=$((STEPCOUNTER+1))
}

function log()
{
  echo "$1"
  [ $LOG == true ] && echo "$1" >> $LOGFILE
}

function error()
{
  echo "ERROR: $1"
  [ $LOG == true ] && echo "$1" >> $LOGFILE
  exit 1
}

function overview()
{
  echo "=========================================="
	echo " OVERVIEW "
	echo "=========================================="
  log "Starting build $(date +"%D %T")"
  log ""
  log "Packages:"
  log "$PACKAGES"
}

#======================================#
# 1. MOUNT / UNMOUNT 
#======================================#

#function unmounting()
# {
#  lognl "Unmount ..."
#  mountpoint -q $MNT && umount -A ${TARGET}* || log "No device mounted!"
#}

function unmount()
{
  lognl "Unmount (proper) ..."
  ps ax | grep -v grep | grep udiskie > /dev/null && log "Kill udiskie automount!" && pkill -9 -e -f udiskie 
  ps ax | grep -v grep | grep udiskd > /dev/null && pkill -9 -e -f udisksd

  ## TODO: efi unmount
  if [ $ADDEFI == YES ]; then
    if mount | grep ${TARGET}3 > /dev/null; then
      umount -f ${TARGET}3 && log "Unmount ${TARGET}2"
    elif mount | grep  ${TARGET}3 > /dev/null; then
      umount -f ${TARGET}2 && log "Unmount ${TARGET}3"
    else
      log "No device mounted!"
    fi
  else
    if mount | grep ${TARGET}2 > /dev/null; then
      umount -f ${TARGET}2 && log "Unmount ${TARGET}2"
    elif mount | grep  ${TARGET}3 > /dev/null; then
      umount -f ${TARGET}3 && log "Unmount ${TARGET}3"
    else
      log "No device mounted!"
    fi
  fi  
}

function mounting()
{
  lognl "Mounting ..."

  mkdir -p "$MNT" && log "Creating mountpoint $MNT done!"
  
  if [ $ADDEFI == YES ]; then
    mount ${TARGET}3 $MNT && log "Mounting ${TARGET}3 on $MNT done!" || error "Mounting ${TARGET}3 on $MNT failed!"
    mkdir -p "$BOOT" && log "Creating mountpoint $BOOT done!"
    mount ${TARGET}2 $BOOT && log "Mounting ${TARGET}2 on $BOOT done!" || error "Mounting ${TARGET}3 on $BOOT failed! ==> Hint: Reboot if mount fails due to unknow filesystem type »vfat«!"
  else
    mount ${TARGET}2 $MNT && log "Mounting ${TARGET}2 on $MNT done!" || error "Mounting ${TARGET}2 on $MNT failed!"
  fi
  

}
#======================================#
# 2. PARTITIONING 
#======================================#
function partioning()
{
  lognl "Partioning ..."
 
  if [ $FULLWIPE == true ]; then
    lognl "Full wipe of ${TARGET} first ..."
    fullwipe
  fi

  sgdisk -Z ${TARGET}

  if [ $ADDEFI == YES ]; then
    log "Add additional EFI partition!"
    sgdisk -o \
      -n 1:0:+10M   -t 1:EF02 \
      -n 2:0:+500M  -t 2:EF00 \
      -n 3:0:+4G    -t 3:8300 \
      -n 4:0:0      -t 4:8300 \
      ${TARGET}

    wipefs -a ${TARGET}2
    wipefs -a ${TARGET}3
    wipefs -a ${TARGET}4
    
    lognl "Formating ..."
    log "Format the 500MB EFI system partition with a FAT32 filesystem"
    mkfs.fat -F32 ${TARGET}2 && log "Creating ${TARGET}2 fs done!" || error "Failed to create FAT /boot"
    log "Format the Linux partition with an ext4 filesystem"
    mkfs.ext4 -q ${TARGET}3 -L rootfs && log "Creating ${TARGET}3 fs done!" error "Failed to create ext4 /rootfs"
    log "Format the data partition with an exfat/ntfs filesystem"
    mkfs.exfat ${TARGET}4 --volume-label=data -v && log "Creating ${TARGET}4 fs done!" error "Failed to create /data"
  else
    log "Only BIOS/MBR boot mode!"
    sgdisk -o \
      -n 1:0:+10M   -t 1:EF02 \
      -n 2:0:+3G    -t 2:8300 \
      -n 3:0:0      -t 3:8300 \
      ${TARGET}

    wipefs -a ${TARGET}2
    wipefs -a ${TARGET}3

    lognl "Formating ..."
    log "Format the Linux partition with an ext4 filesystem"
    mkfs.ext4 -q ${TARGET}2 && log "Creating ${TARGET}2 fs done!" error "Failed to create ext4 /rootfs"
    log "Format the data partition with an exfat/ntfs filesystem"
    mkfs.exfat ${TARGET}3 --volume-label=data -v && log "Creating ${TARGET}3 fs done!" error "Failed to create /data"
  fi
}

function fullwipe()   # optional
{
  SPEEDUP=NO
  lognl "Full wipe ..."
  log "This may take long time depending on disk size (1 hour+)"
  if [ $SPEEDUP == YES ]; then
    dd if=/dev/zero of=$TARGET bs=16M status=progress && sync && log "==> Wiping done!"
  else
    dd if=/dev/zero of=$TARGET status=progress && sync && log "Wiping done!"
  fi
}


#======================================#
#  3. BASE SYSTEM 
#======================================#
function basesystem()
{
  lognl "Install base system ..."
  # download and install the Arch Linux base packages using pacstrap.
  pacstrap $MNT $PACKAGES && \
  log "==> Base system was installed!" || error "Failed to install base system!"
}

#======================================#
# 4. ADDITIONAL PACKAGES
#======================================#
# Install Yay
function install_yay()
{
  lognl "Install AUR helper yay"
  TMPPATH=/tmp/build
  arch-chroot $ROOTFS pacman -S --needed git base-devel
  arch-chroot $ROOTFS git clone https://aur.archlinux.org/yay.git /tmp/yay
  log "run makepkg is not allowed as root ==> run manually later from /tmp/yay"
  # not allowed as root
  # arch-chroot $ROOTFS makepkg --noconfirm -si /tmp/yay
}


#==============================================#
# 5. CONFIG - REQUIRED
#==============================================#

function fstabgen()
{
  lognl "Generate fstab"
  log "==> Generate a new /etc/fstab using UUIDs as source identifiers"
  genfstab -U $ROOTFS > $ROOTFS/etc/fstab && \
  log "==> Generating fstab done!" || error "Failed to create fstab!"

  if [ $ADDEFI == YES ]; then
    UUID_ROOTFS=$(/bin/lsblk -o UUID -n ${TARGET}3 )
    UUID_DATAFS=$(/bin/lsblk -o UUID -n ${TARGET}4 )
  else
    UUID_ROOTFS=$(/bin/lsblk -o UUID -n ${TARGET}2 )
    UUID_DATAFS=$(/bin/lsblk -o UUID -n ${TARGET}3 )
  fi  

  # automount
  cat <<EOF > ${MNT}/etc/fstab
  UUID=${UUID_ROOTFS}     /      ext4  rw,noatime      0 1
  UUID=${UUID_DATAFS}     /data  auto  rw,noatime      0 2
EOF

  if [ $ADDEFI == YES ]; then
    UUID_BOOT=$(/bin/lsblk -o UUID -n ${TARGET}2 )

    cat <<EOF >> ${MNT}/etc/fstab
    UUID=${UUID_BOOT}   /boot  vfat  rw,noatime,...  0 2
EOF
  fi
}


function localecfg()
{
  lognl "Time, Locales & Keyboard Settings"
  log "==> Set timezone"
  arch-chroot $ROOTFS ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime && log "Set timezone" || error "Failed to set timezone!"

  log "==> Set hwclock from BIOS Generate /etc/adjtime (hwclock)"
  arch-chroot $ROOTFS  hwclock --systohc && log "Set hwclock" || error "Failed to set hwclock!"

  LANG=de_DE.UTF-8
  log "set language to ${LANG}"
  arch-chroot $ROOTFS sed -i 's/#de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen && log "Set language to german UTF8" || error "Failed to set language!"
  arch-chroot $ROOTFS locale-gen && log "Set language to german UTF8" || error "Failed to set language!"

  log "Set console keymap to de-latin1"
  arch-chroot $ROOTFS echo "KEYMAP=de-latin1" > /etc/vconsole.conf && log "Set console keymap to german" || error "Failed to set german keymap for console!"
}

function hostcfg()
{
  arch-chroot $ROOTFS echo ${HOSTNAME} > /etc/hostname && log "==> set hostname to ${HOSTNAME}" || error "Failed to set hostname!"

  cat <<EOF > ${ROOTFS}/etc/hosts
  127.0.0.1  localhost
  ::1        localhost
  127.0.1.1  ${HOSTNAME}.localdomain  ${HOSTNAME}"
EOF
}

function bootloader()
{
#cat << EOF | $CHROOT
#grub-install --target=i386-pc --recheck ${TARGET} && \
#grub-install --target=x86_64-efi --efi-directory /boot --recheck --removable && \
#grub-mkconfig -o /boot/grub/grub.cfg
#EOF
  lognl "Install Grub Bootloader"
  if [ "$ADDEFI" == YES ];then
    log "Install bios and efi mode"
    arch-chroot $ROOTFS grub-install --force --target=i386-pc --recheck ${TARGET}
    arch-chroot $ROOTFS grub-install --force --target=x86_64-efi --efi-directory /boot --recheck --removable
    arch-chroot $ROOTFS grub-mkconfig -o /boot/grub/grub.cfg
  else
    log "Install bios mode only"
    arch-chroot $ROOTFS grub-install --force --target=i386-pc --recheck ${TARGET}
    arch-chroot $ROOTFS grub-mkconfig -o /boot/grub/grub.cfg
  fi
}

function create_initial_ramdisk()
{ 
  lognl "Initial ramdisk"
  echo "TODO: create initial ram disk - mkinitcpio"
  echo "Load kernel mpodules before init - early userspace"
  echo "https://wiki.archlinux.org/title/Mkinitcpio"
}

function networkcfg()
{
  lognl "Network config (10-ethernet.network)"  
  log "==> Create network config file for automatically establish wired connections"

  cat << EOF > ${ROOTFS}/etc/systemd/network/10-ethernet.network
  printf "[Match] \
  \nName=en* \
  \nName=en* \
  \nName=eth* \
  \n \
  \n[Network] \
  \nDHCP=yes \
  \nIPv6PrivacyExtensions=yes \
  \n \
  \n[DHCPv4] \
  \nRouteMetric=10 \
  \n \
  \n[IPv6AcceptRA] \
  \nRouteMetric=10" > $PATH
EOF

  # HINT: you can add wireless config here:
  # https://mags.zone/help/arch-usb.html
  log "Enable network (systemd)"
  arch-chroot $ROOTFS systemctl enable systemd-networkd.service
  arch-chroot $ROOTFS systemctl enable systemd-resolved.service
  #arch-chroot $ROOTFS ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf
  arch-chroot $ROOTFS systemctl enable systemd-timesyncd.service
}

function permissionscfg()
{
  lognl "Configure wheelgroup, sudoers, rootpw ... "
  log "==> add user ${USER}"
  #arch-chroot $ROOTFS useradd --disable-password $USER && log "New user $USER was created" || error "Failed to create user $USER!"
  if [ ! -z $(id -u $USER) ];then
    log "User $USER already exists! Skip this step!"
  else
    arch-chroot $ROOTFS useradd -m $USER && log "New user $USER was created" || error "Failed to create user $USER!"
  echo -e "${PASSWORD}\n${PASSWORD}\n" | arch-chroot $ROOTFS passwd $USER && log "Password for user ${USER} changed to ${PASSWORD}" || error "Failed to set user password!" 
  fi

  log "==> Configure wheelgroup & sudo ..."
  arch-chroot $ROOTFS groupadd wheel
  arch-chroot $ROOTFS usermod -aG wheel $USER
  arch-chroot $ROOTFS echo "%sudo ALL=(ALL) ALL" > /etc/sudoers.d/10-sudo && log "Create sudoers!" || error "Failed to create sudoers!"
  arch-chroot $ROOTFS groupadd sudo
  arch-chroot $ROOTFS usermod -aG sudo,video,audio $USER

  arch-chroot $ROOTFS usermod --password $PASSWORD root && log "==> Set root pw to ${PASSWORD}!" || error "==> Failed to set root pw!"
  echo -e "${PASSWORD}\n${PASSWORD}\n" | arch-chroot $ROOTFS passwd root && log "==> Set root pw to ${PASSWORD}!" || error "==> Failed to set root pw!"
}


  

#======================================#
# TUI MENU
#======================================#
#================ TUI CONFIG ===================#
# Autostart does not work:
# https://serverfault.com/questions/1030047/how-do-i-disable-automatic-login-in-a-debian-live-standard-image/1030050#1030050
# https://unix.stackexchange.com/questions/669327/gettytty1-serivce-service-is-permanently-restarting-debian-11-live-iso

function copytui()
{
  FROM=${WORK}/tui
  TO=${MNT}/root
  log "copy $FROM to $TO"
  rsync -rpv $FROM $TO
  
  log "create tui autostart with service mode"
  mkdir -p $ROOTFS/etc/systemd/system/getty@tty1.service.d/ && log "Created agetty dir!" || error "Failed to create agetty dir!"
  rsync -rpv $WORK/config/arch/etc/systemd/system/getty@tty1.service.d/autologin.conf \
            $ROOTFS/etc/systemd/system/getty@tty1.service.d/autologin.conf && log "Create tui tty autostart" || error "Failed to create tui tty autostart!"

}




#======================================#
# MAIN FUNCTIONS
#======================================#

fullbuild()
{
  #
  # install full system include partioning
  #
  about && overview && sleep 2

  unmount
  partioning
  mounting
  basesystem
  
  #install_yay  # not fully working yet
  bootloader
  fstabgen
  localecfg
  hostcfg
  create_initial_ramdisk
  networkcfg
  permissionscfg

  #
  # calls function for update; avoid duplication
  # 
  updatecfg
}

basebuild()
{
  #
  # Build base system without partioning and without config
  # 
  about && overview && sleep 2

  unmount && mounting
  basesystem
  #install_yay
  bootloader
  fstabgen
  localecfg
  hostcfg
  create_initial_ramdisk
  networkcfg
  permissionscfg
  
  copytui
}

updatecfg()
{
  #
  # Update only config files on installed base system
  #
  bootloader
  fstabgen
  localecfg
  hostcfg
  create_initial_ramdisk
  networkcfg
  permissionscfg

  copytui
}

enter_chroot()
{
  [ -z ${TARGET} ] && log "You must specify a target!" && exit 1
  unmount && mounting ${TARGET}3 && lognl "Enter chroot" && arch-chroot $ROOTFS
}

function install_packages()
{
  local _PACKAGES=""
  lognl "Install additional packages (Pacman)"
  if [ ! -z $_PACKAGES ]; then
    log "Packages: $_PACKAGES"
    arch-chroot $ROOTFS pacman -Syyu --noconfirm $_PACKAGES
  else
    log "No packages to install!"
  fi  
}

function copy_images()
{
  lognl "Copy image files to datafs"
  TO=$DATAFS
  mkdir -p $DATAFS
  
  # TODO: if EFI; the TARGET4
  mount ${TARGET}3 $DATAFS

  if [ ! -z $$1 ]; then
    log "Copy image $FROM to $TO"
    rsync -rv $$1 $TO
  else
    error "No path to file geven!"
  fi

  umount -A ${TARGET}3 || umount $DATAFS || log "Nothing to unmount!"
}


#======================================#
#  MAIN
#======================================#

if [ ! -z $TARGET ]; then

  if [ $UNMOUNT == "YES" ]; then
    umount -A ${TARGET}* && sleep 2 && umount ${TARGET}* && lsblk
  fi

  if [ $FULLWIPE == "YES" ]; then
    fullwipe
  fi

  if [ $FULLBUILD == "YES" ]; then
    log "Build full image ..." && fullbuild
  fi

  if [ $BASEBUILD == "YES" ]; then
    log "Build base system ..." && basebuild
  fi

  if [ $UPDATE_TUI == "YES" ]; then
      umount ${TARGET}3 && mounting ${TARGET}3 && cp -rv tui /mnt/usb/root/tui
  fi

  if [ $UPDATE_CONFIG == "YES" ]; then
      unmount && mounting ${TARGET}3 && updatecfg && log "Config is up to date!"
  fi

  if [ $ENTER_CHROOT == "YES" ]; then
      enter_chroot
  fi

  if [ $IMG2DATAFS == "YES" ]; then
      copy_images
  fi

  log "=================================="
  log "DONE!"

else
  log "You must specify a target!"
fi
