#!/bin/bash

# DEBUG OPTIONS:
#set -x # trace complete output
set -e # stop if one command fails
set -u # no undefined/empty variables allowed
set -o pipefail # stop if one pipe fails
LOG=true

# ===============================================
# VARIABLES
# ===============================================
WORK="$(dirname $(readlink -f $0))"
LOGFILE="$WORK/build.log"
source $WORK/version

MNT="/mnt/usb"
ROOTFS="$MNT"
BOOT="/mnt/usb/boot"

PACKAGES=$(tr ' \n' ' ' < $WORK/config/packages.txt)

CHROOT="arch-chroot /mnt/usb"
CHROOTCMD="arch-chroot"

HOSTNAME=superman
USER=polar
ROOTPW="evis32"

# ===============================================
# CLI INTERFACE
# ===============================================

# OPTIONS (DEFAULT)
UNMOUNT="NO"
FULLWIPE="NO"
FULLBUILD="NO"
BASEBUILD="NO"
UPDATE_TUI="NO"
UPDATE_CONFIG="NO"
ENTER_CHROOT="NO"
TARGET=""

function about() 
{
  echo""  
  echo "┌──────────────────────────────────────────────────┐"
  echo "│ Debian Live on USB - Image Creator               │"
  echo "│ ------------------------------------------------ │"
  echo "│ Author:   S. Reddy                               │"
  echo "│ Version:  ${DEBIAN_VERSION}                                    │"
  echo "│ ------------------------------------------------ │"
  echo "│ Purpose:  Swiss Army Knife with tui for          │"
  echo "│           arch install, backup & tools           │"
  echo "└──────────────────────────────────────────────────┘"
  echo""
}

function usage() 
{
    
  echo "┌──────────────────────────────────────────────────┐"
  echo "  USAGE: "
  echo "    $(basename $0) [options] [target]               "
  echo
  echo "  OPTIONS:"
  echo "   -f, --fullbuild    build to target </mnt/<sdX>"
  echo "   -b, --basebuild    build to target </mnt/<sdX>"
  echo "   -w, --fullwipe     wipe USB drive  </mnt/<sdX>"
  echo "   -c, --chroot       enter chroot    </mnt/<sdX>"
  echo
  echo "   --update-tui       copy tui files to </mnt/<sdX>"
  echo "   --update-config    update config on </mnt/<sdX>"
  echo
  echo "   -v, --version      Show $(basename $0) version"
  echo "   -h, --help         This help dialog"
  echo "└──────────────────────────────────────────────────┘"
  echo ""
}

function version()
{
  echo "$(basename $0)"
  echo "Version: ${DEBIAN_VERSION}"
}

POSITIONAL=()
while [[ $# -gt 0 ]]
do
    key="$1"
    case $key in
        -f|--fullbuild)
            FULLBUILD="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -b|--base-system)
            BASEBUILD="YES"
            TARGET="$2"
            shift
            shift
            ;;
        --update-tui)
            UPDATE_TUI="YES"
            TARGET="$2"
            shift
            shift
            ;;
        --update-config)
            UPDATE_CONFIG="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -w|--fullwipe)
            FULLWIPE="YES"
            TARGET="$2"
            shift
            ;;
        -c|--chroot)
            ENTER_CHROOT="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -u|--unmount)
            UNMOUNT="YES"
            TARGET="$2"
            shift
            shift
            ;;
        -v|--version)
            version
            exit 0
            shift
            ;;         
        -h|--help)
            about
            usage
            exit 0
            shift
            ;;
        *)    # unknown option
            POSITIONAL+=("$1") # save it in an array for later
            echo "ERROR: Unknown argument: ${POSITIONAL}"
            usage
            exit 1
            shift
            ;;
    esac
done
set -- "${POSITIONAL[@]}" # restore positional parameters



# ===============================================
# CHECKS
# ===============================================
# root check 
[ $(whoami) != root ] && echo "You must be root!" && exit 1

# check for empty target
#[ -z $TARGET ] && echo -e "You must specify a target. Determine the target USB device name with lsblk first!\n" && usage && exit 1

# clean log 
[ $LOG == true ] && [ -f $LOGFILE ] && rm $LOGFILE





# ===============================================
# FUNCTIONS
# ===============================================
function log()
{
  echo "$1"
  [ $LOG == true ] && echo "$1" >> $LOGFILE
}

function error()
{
  echo "$1"
  [ $LOG == true ] && echo "$1" >> $LOGFILE
  exit 1
}

function lognl()
{
	echo
	echo "=========================================="
	echo "STEP: $1"
	echo "=========================================="
}

function err()
{
	echo
	echo "=========================================="
	echo " ERROR:       $1"
	echo " FROM:        $0"
	echo "=========================================="
	exit 1
}


#================ PARTITIONING ===================#
function partioning()
{ lognl "Partioning" 
  log "Clear partion data and create new partion table!"
  sgdisk -Z ${TARGET}
  sgdisk -o -n 1:0:+10M   -t 1:EF02 \
            -n 2:0:+500M  -t 2:EF00 \
            -n 3:0:+3G    -t 3:8300 \
            -n 4:0:0      -t 4:8300 \
            ${TARGET}

  log "Wipe ${TARGET}"
  wipefs -a ${TARGET}2
  wipefs -a ${TARGET}3
  wipefs -a ${TARGET}4


  lognl "Formating"
  # Hint: Do not format the /dev/sdX1 block. This is the BIOS/MBR parition."
  
  # Format the 500MB EFI system partition with a FAT32 filesystem:
  mkfs.fat -F32 ${TARGET}2 && log "Creating ${TARGET}2 fs done!"

  # Format the Linux partition with an ext4 filesystem:
  mkfs.ext4 -q ${TARGET}3 && log "Creating ${TARGET}3 fs done!"

  # Format the data partition with an exfat/ntfs filesystem:
  mkfs.ext4 -q ${TARGET}4 && log "Creating ${TARGET}4 fs done!"
}

function fullwipe()   # optional
{
  log "Start full wipe ..."
  log "This may take long time depending on disk size (1 hour+)"
  dd if=/dev/zero of=$TARGET status=progress && sync && log "Wiping done!"
  #dd if=/dev/zero of=$TARGET bs=16M status=progress && sync && log "==> Wiping done!"
}

#================ MOUNTING ===================#

function unmounting()
{
  log "==> Unmount first ..."

  if mountpoint -q $BOOT; then
    log "==> $BOOT is still mounted!"
    umount $BOOT && log "Unmount $BOOT sucessfull!" || error "Failed to unmount $BOOT" 
  fi
  
  if mountpoint -q $MNT; then
    log "==> $MNT is still mounted!"
    umount $MNT && log "Unmount $MNT successful!" || error "Failed to unmount $MNT"
  fi

  if mountpoint -q $MNT; then
  log "==> $MNT is still mounted!"
  umount $MNT && log "Unmount $MNT successful!" || error "Failed to unmount $MNT"
  fi

  log "==> Unmounting done!" && log ""
}

function mounting()
{
  log "==> Start mounting ..."
  
  log "==> Mount the ext4 formatted partition as the root filesystem"
  mkdir -p "$MNT" && log "Creating mountpoint $MNT done!"
  mount ${TARGET}3 $MNT && log "Mounting ${TARGET}3 on $MNT done!" || error "Mounting ${TARGET}3 on $MNT failed!"

  log "==> Mount the FAT32 formatted EFI partition to /boot"
  mkdir -p "$BOOT" && log "Creating mountpoint $BOOT done!"
  mount ${TARGET}2 $BOOT && log "Mounting ${TARGET}2 on $BOOT done!" || error "Mounting ${TARGET}3 on $BOOT failed! ==> Hint: Reboot if mount fails due to unknow filesystem type »vfat«!"

  log "==> Mounting done!" && log ""
}


#================ BASE SYSTEM ===================#

function basesystem()
{
  log "==> Download and install the Arch Linux base packages using pacstrap."
  pacstrap $MNT $PACKAGES && \
  log "==> Installing base system done!" && log ""
}

# Install Yay
function install_yay()
{
  local PATH=/tmp/build
  #$CHROOT pacman -S --needed git base-devel
  "${CHROOT}" mkdir -p $PATH && cd $PATH && git clone https://aur.archlinux.org/yay.git && cd yay && makepkg -si
}

function fstabgen()
{
  log "==> Generate a new /etc/fstab using UUIDs as source identifiers"
  genfstab -U /mnt/usb > /mnt/usb/etc/fstab && \
  log "==> Generating fstab done!" && log ""
}



#==============================================#
# CONFIGURE
#==============================================#

function localecfg()
{
  log "==> Set timezone"
  $CHROOT ln -sf /usr/share/zoneinfo/Europe/Berlin /etc/localtime

  log "==> Generate /etc/adjtime (hwclock)"
  $CHROOT  hwclock --systohc

  LANG=de_DE.UTF-8
  log "set language to ${LANG}"
  # Uncomment desired language in /etc/locale.gen:
  #$CHROOT sed -i 's/#de_DE ISO-8859-1/de_DE ISO-8859-1/g' /etc/locale.gen
  $CHROOT sed -i 's/#de_DE.UTF-8 UTF-8/de_DE.UTF-8 UTF-8/g' /etc/locale.gen
  $CHROOT locale-gen
  $CHROOT echo "LANG=de_DE.UTF-8" > /etc/locale.conf

  $CHROOT ech "KEYMAP=de-latin1" > /etc/vconsole.conf

}

#================ USER-CFG ===================#

function hostcfg()
{
  $CHROOT echo ${HOSTNAME} > /etc/hostname && log "==> set hostname to ${HOSTNAME}" 

cat <<EOF > ${MNT}/etc/hosts
127.0.0.1  localhost
::1        localhost
127.0.1.1  ${HOSTNAME}.localdomain  ${HOSTNAME}"
EOF
}




#================ BOOTLAODER ===================#

function bootloader()
{
  lognl "Install Bootloader"
#cat << EOF | $CHROOT
#grub-install --target=i386-pc --recheck ${TARGET} && \
#grub-install --target=x86_64-efi --efi-directory /boot --recheck --removable && \
#grub-mkconfig -o /boot/grub/grub.cfg
#EOF

  $CHROOT grub-install --force --target=i386-pc --recheck ${TARGET}
  $CHROOT grub-install --force --target=x86_64-efi --efi-directory /boot --recheck --removable
  $CHROOT grub-mkconfig -o /boot/grub/grub.cfg
}

function deb_bootloader()
{
  lognl "Install Bootloader"
  chmod -x "${ROOTFS}/etc/grub.d/30_os-prober"
  chroot "${ROOTFS}" grub-install --force ${TARGET}
  chroot "${ROOTFS}" update-grub
}

function newmkinitcpio()
{
 echo "TODO"
}

#================ END::BOOTLAODER ===================#

function networkcfg()
{
log "" && log "==> Create network configuration file for automatically establish wired connections"
local PATH=/etc/systemd/network/10-ethernet.network

# TODO:
# printf 'line1\nline2\nline3\n'
# echo -e ""

cat << EOF | $CHROOT
printf "[Match] \
\nName=en* \     
\nName=en* \
\nName=eth* \
\n \
\n[Network] \
\nDHCP=yes \
\nIPv6PrivacyExtensions=yes \  
\n \
\n[DHCPv4] \
\nRouteMetric=10 \ 
\n \
\n[IPv6AcceptRA] \
\nRouteMetric=10" > $PATH
EOF

# HINT: you can add wireless config here:
# https://mags.zone/help/arch-usb.html
}

function networkenable()
{
log "==> Enable systemd networking service"
cat << EOF | $CHROOT
systemctl enable systemd-networkd.service

systemctl enable systemd-resolved.service
ln -sf /run/systemd/resolve/stub-resolv.conf /etc/resolv.conf 

systemctl enable systemd-timesyncd.service
EOF
}


function wheelgrpcfg()
{
  log "==> Ensure the wheel group exists and add user to it."
cat << EOF | $CHROOT
groupadd wheel
usermod -aG wheel polar
EOF
log ""
}

function sudocfg()
{
  log "==> Configure sudo ..."
  $CHROOT echo "%sudo ALL=(ALL) ALL" > /etc/sudoers.d/10-sudo
  $CHROOT groupadd sudo && log "==> Add sudo group" || error "==> Failed to add sudo group!"
  $CHROOT usermod -aG sudo $USER && log "==> Add sudo for $USER" || error "==> Failed to add sudo to $USER!"
  log ""
}

# TODO: 


function rootpwcfg()
{
  $CHROOT usermod --password $ROOTPW root && log "==> Set root pw to ${ROOTPW}!" || error "==> Failed to set root pw!"
  echo -e "${ROOTPW}\n${ROOTPW}\n" | $CHROOTCMD $MNT passwd root && log "==> Set root pw to ${ROOTPW}!" || error "==> Failed to set root pw!"
}



#================ TUI CONFIG ===================#
# Autostart does not work:
# https://serverfault.com/questions/1030047/how-do-i-disable-automatic-login-in-a-debian-live-standard-image/1030050#1030050
# https://unix.stackexchange.com/questions/669327/gettytty1-serivce-service-is-permanently-restarting-debian-11-live-iso

function copytui()
{
  log "copy $WORK/tui to ${MNT}/opt"
  cp -rv ${WORK}/tui  /opt
  $CHROOT chown root  /opt/tui/*
  $CHROOT chmod +x    /opt/tui/*

  cp -rv --parents ${WORK}/config/etc/systemd/system/getty\@tty1.service.d/autologin.conf \
                    ${MNT}/config/etc/systemd/system/getty\@tty1.service.d/autologin.conf       
}

function automount()
{
# automount 
cat <<EOF > ${MNT}/etc/fstabF
UUID=${UUID_ROOTFS}  /          ext4  errors=remount-ro  0  1
UUID=${UUID_DATAFS}  /data      vfat  uid=${IMAGE_USER},gid=${IMAGE_USER}  0  2
EOF
}

function tuiautostart()
{
log "create tui autostart on getty"
# file: /etc/systemd/system/getty\@tty1.service.d/override.conf
cat <<EOF > ${MNT}/etc/systemd/system/getty\@tty1.service.d/autologin.conf
[Service]
ExecStart=
ExecStart=-/usr/sbin/agetty --autologin root --login-program /root/tui/menu.sh --mode service --noissue --noclear %I $TERM
EOF

log "tui getty autostart done!" && log ""
}




# ===========================
# MAIN FUNCTIONS
# ===========================
_buildbasesys()
{
  about
  log "Starting build $(date +"%D %T")"
  sleep 2

  ### prepare ###
  unmounting
  partioning
  mounting

  ### base system ###
  basesystem
  install_yay
  fstabgen
}

_configure()
{
  ### fresh mount ###
  unmounting
  mounting


  localecfg
  hostcfg

  $CHROOT locale-gen de_DE.UTF-8

  networkcfg
  networkenable

  rootpwcfg
  wheelgrpcfg

  #sudocfg #TODO: dont works
  copytui
  #automount
  #tuiautostart
}

fullbuild()
{
  _buildbasesys
  _configure
}

basebuild()
{
  _buildbasesys
}

updatecfg()
{
  _configure
}

function enter_chroot()
{ 
  [ -z ${TARGET} ] && log "You must specify a target!" && exit 1
  unmounting && mounting ${TARGET}3
  $CHROOTCMD $MNT
}



# ============================================= #
#  MAIN
# ============================================= #

if [ ! -z $TARGET ]; then 

  if [ $UNMOUNT == "YES" ]; then
    umount -A ${TARGET}* && umount ${TARGET}* && lsblk
  fi

  if [ $FULLWIPE == "YES" ]; then
    fullwipe
  fi

  if [ $FULLBUILD == "YES" ]; then
    log "Build full image ..." && fullbuild
  fi

  if [ $BASEBUILD == "YES" ]; then
    log "Build full image ..." && basebuild
  fi

  if [ $UPDATE_TUI == "YES" ]; then
      umount ${TARGET}3 && mounting ${TARGET}3 && cp -rv tui /mnt/usb/root/tui
  fi

  if [ $UPDATE_CONFIG == "YES" ]; then
      umount ${TARGET}3 && mounting ${TARGET}3 && updatecfg && log "Config is up to date!"
  fi

  if [ $ENTER_CHROOT == "YES" ]; then
      enter_chroot
  fi

  log "=================================="
  log "DONE!"

else
  log "You must specify a argument with target!"
fi